install.packages("data.table");
library(data.table);

if (!file.exists("data")) {
        dir.create("data")
};
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip";
download.file(url, destfile = "./data/run.zip");
unzip("./data/run.zip", exdir = "./data/run_data", list=T);

dateDownloaded <- date();

# merge training and test files
setwd("./data/run_data/UCI HAR Dataset")

features     <- read.table('./features.txt',header=FALSE);
activityType <- read.table('./activity_labels.txt',header=FALSE);
subjectTrain <- read.table('./train/subject_train.txt',header=FALSE); 
xTrain       <- read.table('./train/x_train.txt',header=FALSE);
yTrain       <- read.table('./train/y_train.txt',header=FALSE);


subjectTest <- read.table('./test/subject_test.txt',header=FALSE);
xTest       <- read.table('./test/x_test.txt',header=FALSE);
yTest       <- read.table('./test/y_test.txt',header=FALSE); 



# Assigin column names to the data 
colnames(activityType)  <- c('activityId','activityType');
colnames(subjectTrain)  <- "subjectId";
colnames(xTrain)        <- features[,2] ; 
colnames(yTrain)        <- "activityId";

colnames(subjectTest) <- "subjectId"; 
colnames(xTest)       <- features[,2];  
colnames(yTest)       <- "activityId";

trainingData <- cbind(yTrain,subjectTrain,xTrain);
testData <- cbind(yTest,subjectTest,xTest);
totalData <- rbind(trainingData,testData);

colNames  <- colnames(totalData);  
 

# 2. Extract only the measurements on the mean and standard deviation for each measurement.  
# Create a logicalVector that contains TRUE values for the ID, mean() & stddev() columns and FALSE for others 
logicalVector <- (grepl("activity..",colNames) | grepl("subject..",colNames) | grepl("-mean..",colNames) 
                  & !grepl("-meanFreq..",colNames) & !grepl("mean..-",colNames) | grepl("-std..",colNames) 
                  & !grepl("-std()..-",colNames)); 

totalData <- totalData[logicalVector==TRUE]; 

# 3. Use descriptive activity names to name the activities in the data set 
# Merge the totalData set with the acitivityType table to include descriptive activity names 
mergedData <- merge(totalData,activityType,by='activityId', all.x=TRUE); 


# Update colNames after merge 
colNames  = colnames(totalData);  

# 4. Appropriately label the data set with descriptive activity names.  
# Cleaning up the variable names 

for (i in 1:length(colNames))  
{ 
   colNames[i] <- gsub("\\()","",colNames[i]) 
   colNames[i] <- gsub("-std$","StdDev",colNames[i]) 
   colNames[i] <- gsub("-mean","Mean",colNames[i]) 
   colNames[i] <- gsub("^(t)","time",colNames[i]) 
   colNames[i] <- gsub("^(f)","freq",colNames[i]) 
   colNames[i] <- gsub("([Gg]ravity)","Gravity",colNames[i]) 
   colNames[i] <- gsub("([Bb]ody[Bb]ody|[Bb]ody)","Body",colNames[i]) 
   colNames[i] <- gsub("[Gg]yro","Gyro",colNames[i]) 
   colNames[i] <- gsub("AccMag","AccMagnitude",colNames[i]) 
   colNames[i] <- gsub("([Bb]odyaccjerkmag)","BodyAccJerkMagnitude",colNames[i]) 
   colNames[i] <- gsub("JerkMag","JerkMagnitude",colNames[i]) 
   colNames[i] <- gsub("GyroMag","GyroMagnitude",colNames[i]) 
}; 


# Reassigning the new descriptive column names to the finalData set 
colnames(totalData) <- colNames; 


# 5. Create a second, independent tidy data set with the average of each variable for each activity and each subject.  
# Create a new table, finalData without the activityType column 
finalData  <- totalData[,names(totalData) != 'activityType']; 


# Summarizing the finalData table to include just the mean of each variable for each activity and each subject 
tidyData    <- aggregate(finalData[,names(finalData) != c('activityId','subjectId')], 
                by=list(activityId=finalData$activityId, subjectId = finalData$subjectId),mean); 

# Merging the tidyData with activityType to include descriptive acitvity names 
tidyData2    <- merge(tidyData,activityType,by='activityId',all.x=TRUE); 

# Export the tidyData set  
write.table(tidyData2, './tidyData.txt',row.names=FALSE,sep='\t');

Enter file contents here
